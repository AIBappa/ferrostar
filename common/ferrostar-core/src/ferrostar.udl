//
// Namespace to encapsulate top-level functions
//

namespace ferrostar {
    RouteRequestGenerator create_valhalla_request_generator(string endpoint_url, string profile);
    RouteResponseParser create_osrm_response_parser(u32 polyline_precision);
};

//
// Error types
//

[Error]
enum RoutingRequestGenerationError {
    "NotEnoughWaypoints",
    "JsonError",
    "UnknownError"
};

[Error]
interface RoutingResponseParseError {
    ParseError(string error);
    UnknownError();
};

//
// Data structures
//

dictionary GeographicCoordinates {
    double lat;
    double lng;
};

dictionary Course {
    u16 degrees;
    u16 accuracy;
};

dictionary UserLocation {
    GeographicCoordinates coordinates;
    double horizontal_accuracy;
    Course? course;
};

dictionary Route {
    sequence<GeographicCoordinates> geometry;
    sequence<GeographicCoordinates> waypoints;
};

dictionary SpokenInstruction {
    string text;
    string? ssml;
};

[Enum]
interface RouteRequest {
    HttpPost(string url, record<DOMString, string> headers, sequence<u8> body);
};

[Enum]
interface NavigationStateUpdate {
    Navigating(UserLocation snapped_user_location, sequence<GeographicCoordinates> remaining_waypoints, SpokenInstruction? spoken_instruction);
    Arrived(SpokenInstruction? spoken_instruction);
};

//
// Callback interfaces (foreign code can implement these to extend functionality)
//

callback interface RouteRequestGenerator {
    [Throws=RoutingRequestGenerationError]
    RouteRequest generate_request(UserLocation user_location, sequence<GeographicCoordinates> waypoints);
};

callback interface RouteResponseParser {
    [Throws=RoutingResponseParseError]
    sequence<Route> parse_response(sequence<u8> response);
};

interface RouteAdapter {
    constructor(RouteRequestGenerator request_generator, RouteResponseParser response_parser);
    [Name=new_valhalla_http]
    constructor(string endpoint_url, string profile);

    [Throws=RoutingRequestGenerationError]
    RouteRequest generate_request(UserLocation user_location, sequence<GeographicCoordinates> waypoints);

    [Throws=RoutingResponseParseError]
    sequence<Route> parse_response(sequence<u8> response);
};

interface NavigationController {
    constructor(UserLocation last_user_location, Route route);

    NavigationStateUpdate update_user_location(UserLocation location);
};