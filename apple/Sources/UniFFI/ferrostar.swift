// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(ferrostarFFI)
import ferrostarFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_ferrostar_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_ferrostar_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_PANIC: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_PANIC:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.


fileprivate struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Double {
        return try lift(readDouble(&buf))
    }

    public static func write(_ value: Double, into buf: inout [UInt8]) {
        writeDouble(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}

fileprivate struct FfiConverterTimestamp: FfiConverterRustBuffer {
    typealias SwiftType = Date

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Date {
        let seconds: Int64 = try readInt(&buf)
        let nanoseconds: UInt32 = try readInt(&buf)
        if seconds >= 0 {
            let delta = Double(seconds) + (Double(nanoseconds) / 1.0e9)
            return Date.init(timeIntervalSince1970: delta)
        } else {
            let delta = Double(seconds) - (Double(nanoseconds) / 1.0e9)
            return Date.init(timeIntervalSince1970: delta)
        }
    }

    public static func write(_ value: Date, into buf: inout [UInt8]) {
        var delta = value.timeIntervalSince1970
        var sign: Int64 = 1
        if delta < 0 {
            // The nanoseconds portion of the epoch offset must always be
            // positive, to simplify the calculation we will use the absolute
            // value of the offset.
            sign = -1
            delta = -delta
        }
        if delta.rounded(.down) > Double(Int64.max) {
            fatalError("Timestamp overflow, exceeds max bounds supported by Uniffi")
        }
        let seconds = Int64(delta)
        let nanoseconds = UInt32((delta - Double(seconds)) * 1.0e9)
        writeInt(&buf, sign * seconds)
        writeInt(&buf, nanoseconds)
    }
}



public protocol NavigationControllerProtocol : AnyObject {
    func advanceToNextStep(state: TripState)  -> TripState
    func getInitialState(location: UserLocation)  -> TripState
    func updateUserLocation(location: UserLocation, state: TripState)  -> TripState
    
}

public class NavigationController:
    NavigationControllerProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init(route: Route, config: NavigationControllerConfig)  {
        self.init(unsafeFromRawPointer: try! rustCall() {
    uniffi_ferrostar_fn_constructor_navigationcontroller_new(
        FfiConverterTypeRoute.lower(route),
        FfiConverterTypeNavigationControllerConfig.lower(config),$0)
})
    }

    deinit {
        try! rustCall { uniffi_ferrostar_fn_free_navigationcontroller(pointer, $0) }
    }

    

    
    

    public func advanceToNextStep(state: TripState)  -> TripState {
        return try!  FfiConverterTypeTripState.lift(
            try! 
    rustCall() {
    
    uniffi_ferrostar_fn_method_navigationcontroller_advance_to_next_step(self.pointer, 
        FfiConverterTypeTripState.lower(state),$0
    )
}
        )
    }

    public func getInitialState(location: UserLocation)  -> TripState {
        return try!  FfiConverterTypeTripState.lift(
            try! 
    rustCall() {
    
    uniffi_ferrostar_fn_method_navigationcontroller_get_initial_state(self.pointer, 
        FfiConverterTypeUserLocation.lower(location),$0
    )
}
        )
    }

    public func updateUserLocation(location: UserLocation, state: TripState)  -> TripState {
        return try!  FfiConverterTypeTripState.lift(
            try! 
    rustCall() {
    
    uniffi_ferrostar_fn_method_navigationcontroller_update_user_location(self.pointer, 
        FfiConverterTypeUserLocation.lower(location),
        FfiConverterTypeTripState.lower(state),$0
    )
}
        )
    }

}

public struct FfiConverterTypeNavigationController: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = NavigationController

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> NavigationController {
        return NavigationController(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: NavigationController) -> UnsafeMutableRawPointer {
        return value.pointer
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NavigationController {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: NavigationController, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


public func FfiConverterTypeNavigationController_lift(_ pointer: UnsafeMutableRawPointer) throws -> NavigationController {
    return try FfiConverterTypeNavigationController.lift(pointer)
}

public func FfiConverterTypeNavigationController_lower(_ value: NavigationController) -> UnsafeMutableRawPointer {
    return FfiConverterTypeNavigationController.lower(value)
}



public protocol RouteAdapterProtocol : AnyObject {
    func generateRequest(userLocation: UserLocation, waypoints: [GeographicCoordinate]) throws  -> RouteRequest
    func parseResponse(response: Data) throws  -> [Route]
    
}

public class RouteAdapter:
    RouteAdapterProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init(requestGenerator: RouteRequestGenerator, responseParser: RouteResponseParser)  {
        self.init(unsafeFromRawPointer: try! rustCall() {
    uniffi_ferrostar_fn_constructor_routeadapter_new(
        FfiConverterTypeRouteRequestGenerator.lower(requestGenerator),
        FfiConverterTypeRouteResponseParser.lower(responseParser),$0)
})
    }

    deinit {
        try! rustCall { uniffi_ferrostar_fn_free_routeadapter(pointer, $0) }
    }

    

    public static func newValhallaHttp(endpointUrl: String, profile: String)  -> RouteAdapter {
        return RouteAdapter(unsafeFromRawPointer: try! rustCall() {
    uniffi_ferrostar_fn_constructor_routeadapter_new_valhalla_http(
        FfiConverterString.lower(endpointUrl),
        FfiConverterString.lower(profile),$0)
})
    }

    

    
    

    public func generateRequest(userLocation: UserLocation, waypoints: [GeographicCoordinate]) throws  -> RouteRequest {
        return try  FfiConverterTypeRouteRequest.lift(
            try 
    rustCallWithError(FfiConverterTypeRoutingRequestGenerationError.lift) {
    uniffi_ferrostar_fn_method_routeadapter_generate_request(self.pointer, 
        FfiConverterTypeUserLocation.lower(userLocation),
        FfiConverterSequenceTypeGeographicCoordinate.lower(waypoints),$0
    )
}
        )
    }

    public func parseResponse(response: Data) throws  -> [Route] {
        return try  FfiConverterSequenceTypeRoute.lift(
            try 
    rustCallWithError(FfiConverterTypeRoutingResponseParseError.lift) {
    uniffi_ferrostar_fn_method_routeadapter_parse_response(self.pointer, 
        FfiConverterData.lower(response),$0
    )
}
        )
    }

}

public struct FfiConverterTypeRouteAdapter: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = RouteAdapter

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> RouteAdapter {
        return RouteAdapter(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: RouteAdapter) -> UnsafeMutableRawPointer {
        return value.pointer
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RouteAdapter {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: RouteAdapter, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


public func FfiConverterTypeRouteAdapter_lift(_ pointer: UnsafeMutableRawPointer) throws -> RouteAdapter {
    return try FfiConverterTypeRouteAdapter.lift(pointer)
}

public func FfiConverterTypeRouteAdapter_lower(_ value: RouteAdapter) -> UnsafeMutableRawPointer {
    return FfiConverterTypeRouteAdapter.lower(value)
}



public protocol RouteRequestGenerator : AnyObject {
    func generateRequest(userLocation: UserLocation, waypoints: [GeographicCoordinate]) throws  -> RouteRequest
    
}

public class RouteRequestGeneratorImpl:
    RouteRequestGenerator {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_ferrostar_fn_free_routerequestgenerator(pointer, $0) }
    }

    

    
    

    public func generateRequest(userLocation: UserLocation, waypoints: [GeographicCoordinate]) throws  -> RouteRequest {
        return try  FfiConverterTypeRouteRequest.lift(
            try 
    rustCallWithError(FfiConverterTypeRoutingRequestGenerationError.lift) {
    uniffi_ferrostar_fn_method_routerequestgenerator_generate_request(self.pointer, 
        FfiConverterTypeUserLocation.lower(userLocation),
        FfiConverterSequenceTypeGeographicCoordinate.lower(waypoints),$0
    )
}
        )
    }

}
fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate typealias UniFFICallbackHandle = UInt64
fileprivate class UniFFICallbackHandleMap<T> {
    private var leftMap: [UniFFICallbackHandle: T] = [:]
    private var counter: [UniFFICallbackHandle: UInt64] = [:]
    private var rightMap: [ObjectIdentifier: UniFFICallbackHandle] = [:]

    private let lock = NSLock()
    private var currentHandle: UniFFICallbackHandle = 1
    private let stride: UniFFICallbackHandle = 1

    func insert(obj: T) -> UniFFICallbackHandle {
        lock.withLock {
            let id = ObjectIdentifier(obj as AnyObject)
            let handle = rightMap[id] ?? {
                currentHandle += stride
                let handle = currentHandle
                leftMap[handle] = obj
                rightMap[id] = handle
                return handle
            }()
            counter[handle] = (counter[handle] ?? 0) + 1
            return handle
        }
    }

    func get(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            leftMap[handle]
        }
    }

    func delete(handle: UniFFICallbackHandle) {
        remove(handle: handle)
    }

    @discardableResult
    func remove(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            defer { counter[handle] = (counter[handle] ?? 1) - 1 }
            guard counter[handle] == 1 else { return leftMap[handle] }
            let obj = leftMap.removeValue(forKey: handle)
            if let obj = obj {
                rightMap.removeValue(forKey: ObjectIdentifier(obj as AnyObject))
            }
            return obj
        }
    }
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Declaration and FfiConverters for RouteRequestGenerator Callback Interface

fileprivate let uniffiCallbackInterfaceRouteRequestGenerator : ForeignCallback =
    { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in
    

    func invokeGenerateRequest(_ swiftCallbackInterface: RouteRequestGenerator, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _ out_buf: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
        func makeCall() throws -> Int32 {
            let result =  try swiftCallbackInterface.generateRequest(
                    userLocation:  try FfiConverterTypeUserLocation.read(from: &reader), 
                    waypoints:  try FfiConverterSequenceTypeGeographicCoordinate.read(from: &reader)
                    )
            var writer = [UInt8]()
            FfiConverterTypeRouteRequest.write(result, into: &writer)
            out_buf.pointee = RustBuffer(bytes: writer)
            return UNIFFI_CALLBACK_SUCCESS
        }
        do {
            return try makeCall()
        } catch let error as RoutingRequestGenerationError {
            out_buf.pointee = FfiConverterTypeRoutingRequestGenerationError.lower(error)
            return UNIFFI_CALLBACK_ERROR
        }
    }


    switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterTypeRouteRequestGenerator.handleMap.remove(handle: handle)
            // Sucessful return
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_SUCCESS
        case 1:
            guard let cb = FfiConverterTypeRouteRequestGenerator.handleMap.get(handle: handle) else {
                out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try invokeGenerateRequest(cb, argsData, argsLen, out_buf)
            } catch let error {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        
        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    }
}

private func uniffiCallbackInitRouteRequestGenerator() {
    uniffi_ferrostar_fn_init_callback_routerequestgenerator(uniffiCallbackInterfaceRouteRequestGenerator)
}

public struct FfiConverterTypeRouteRequestGenerator: FfiConverter {
    fileprivate static var handleMap = UniFFICallbackHandleMap<RouteRequestGenerator>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = RouteRequestGenerator

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> RouteRequestGenerator {
        return RouteRequestGeneratorImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: RouteRequestGenerator) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RouteRequestGenerator {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: RouteRequestGenerator, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


public func FfiConverterTypeRouteRequestGenerator_lift(_ pointer: UnsafeMutableRawPointer) throws -> RouteRequestGenerator {
    return try FfiConverterTypeRouteRequestGenerator.lift(pointer)
}

public func FfiConverterTypeRouteRequestGenerator_lower(_ value: RouteRequestGenerator) -> UnsafeMutableRawPointer {
    return FfiConverterTypeRouteRequestGenerator.lower(value)
}



public protocol RouteResponseParser : AnyObject {
    func parseResponse(response: Data) throws  -> [Route]
    
}

public class RouteResponseParserImpl:
    RouteResponseParser {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_ferrostar_fn_free_routeresponseparser(pointer, $0) }
    }

    

    
    

    public func parseResponse(response: Data) throws  -> [Route] {
        return try  FfiConverterSequenceTypeRoute.lift(
            try 
    rustCallWithError(FfiConverterTypeRoutingResponseParseError.lift) {
    uniffi_ferrostar_fn_method_routeresponseparser_parse_response(self.pointer, 
        FfiConverterData.lower(response),$0
    )
}
        )
    }

}


// Declaration and FfiConverters for RouteResponseParser Callback Interface

fileprivate let uniffiCallbackInterfaceRouteResponseParser : ForeignCallback =
    { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in
    

    func invokeParseResponse(_ swiftCallbackInterface: RouteResponseParser, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _ out_buf: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
        func makeCall() throws -> Int32 {
            let result =  try swiftCallbackInterface.parseResponse(
                    response:  try FfiConverterData.read(from: &reader)
                    )
            var writer = [UInt8]()
            FfiConverterSequenceTypeRoute.write(result, into: &writer)
            out_buf.pointee = RustBuffer(bytes: writer)
            return UNIFFI_CALLBACK_SUCCESS
        }
        do {
            return try makeCall()
        } catch let error as RoutingResponseParseError {
            out_buf.pointee = FfiConverterTypeRoutingResponseParseError.lower(error)
            return UNIFFI_CALLBACK_ERROR
        }
    }


    switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterTypeRouteResponseParser.handleMap.remove(handle: handle)
            // Sucessful return
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_SUCCESS
        case 1:
            guard let cb = FfiConverterTypeRouteResponseParser.handleMap.get(handle: handle) else {
                out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try invokeParseResponse(cb, argsData, argsLen, out_buf)
            } catch let error {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        
        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    }
}

private func uniffiCallbackInitRouteResponseParser() {
    uniffi_ferrostar_fn_init_callback_routeresponseparser(uniffiCallbackInterfaceRouteResponseParser)
}

public struct FfiConverterTypeRouteResponseParser: FfiConverter {
    fileprivate static var handleMap = UniFFICallbackHandleMap<RouteResponseParser>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = RouteResponseParser

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> RouteResponseParser {
        return RouteResponseParserImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: RouteResponseParser) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RouteResponseParser {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: RouteResponseParser, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


public func FfiConverterTypeRouteResponseParser_lift(_ pointer: UnsafeMutableRawPointer) throws -> RouteResponseParser {
    return try FfiConverterTypeRouteResponseParser.lift(pointer)
}

public func FfiConverterTypeRouteResponseParser_lower(_ value: RouteResponseParser) -> UnsafeMutableRawPointer {
    return FfiConverterTypeRouteResponseParser.lower(value)
}


public struct CourseOverGround {
    public var degrees: UInt16
    public var accuracy: UInt16

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(degrees: UInt16, accuracy: UInt16) {
        self.degrees = degrees
        self.accuracy = accuracy
    }
}


extension CourseOverGround: Equatable, Hashable {
    public static func ==(lhs: CourseOverGround, rhs: CourseOverGround) -> Bool {
        if lhs.degrees != rhs.degrees {
            return false
        }
        if lhs.accuracy != rhs.accuracy {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(degrees)
        hasher.combine(accuracy)
    }
}


public struct FfiConverterTypeCourseOverGround: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CourseOverGround {
        return
            try CourseOverGround(
                degrees: FfiConverterUInt16.read(from: &buf), 
                accuracy: FfiConverterUInt16.read(from: &buf)
        )
    }

    public static func write(_ value: CourseOverGround, into buf: inout [UInt8]) {
        FfiConverterUInt16.write(value.degrees, into: &buf)
        FfiConverterUInt16.write(value.accuracy, into: &buf)
    }
}


public func FfiConverterTypeCourseOverGround_lift(_ buf: RustBuffer) throws -> CourseOverGround {
    return try FfiConverterTypeCourseOverGround.lift(buf)
}

public func FfiConverterTypeCourseOverGround_lower(_ value: CourseOverGround) -> RustBuffer {
    return FfiConverterTypeCourseOverGround.lower(value)
}


public struct GeographicCoordinate {
    public var lng: Double
    public var lat: Double

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(lng: Double, lat: Double) {
        self.lng = lng
        self.lat = lat
    }
}


extension GeographicCoordinate: Equatable, Hashable {
    public static func ==(lhs: GeographicCoordinate, rhs: GeographicCoordinate) -> Bool {
        if lhs.lng != rhs.lng {
            return false
        }
        if lhs.lat != rhs.lat {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(lng)
        hasher.combine(lat)
    }
}


public struct FfiConverterTypeGeographicCoordinate: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GeographicCoordinate {
        return
            try GeographicCoordinate(
                lng: FfiConverterDouble.read(from: &buf), 
                lat: FfiConverterDouble.read(from: &buf)
        )
    }

    public static func write(_ value: GeographicCoordinate, into buf: inout [UInt8]) {
        FfiConverterDouble.write(value.lng, into: &buf)
        FfiConverterDouble.write(value.lat, into: &buf)
    }
}


public func FfiConverterTypeGeographicCoordinate_lift(_ buf: RustBuffer) throws -> GeographicCoordinate {
    return try FfiConverterTypeGeographicCoordinate.lift(buf)
}

public func FfiConverterTypeGeographicCoordinate_lower(_ value: GeographicCoordinate) -> RustBuffer {
    return FfiConverterTypeGeographicCoordinate.lower(value)
}


public struct LocationSimulationState {
    public var currentLocation: GeographicCoordinate
    public var remainingLocations: [GeographicCoordinate]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(currentLocation: GeographicCoordinate, remainingLocations: [GeographicCoordinate]) {
        self.currentLocation = currentLocation
        self.remainingLocations = remainingLocations
    }
}


extension LocationSimulationState: Equatable, Hashable {
    public static func ==(lhs: LocationSimulationState, rhs: LocationSimulationState) -> Bool {
        if lhs.currentLocation != rhs.currentLocation {
            return false
        }
        if lhs.remainingLocations != rhs.remainingLocations {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(currentLocation)
        hasher.combine(remainingLocations)
    }
}


public struct FfiConverterTypeLocationSimulationState: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LocationSimulationState {
        return
            try LocationSimulationState(
                currentLocation: FfiConverterTypeGeographicCoordinate.read(from: &buf), 
                remainingLocations: FfiConverterSequenceTypeGeographicCoordinate.read(from: &buf)
        )
    }

    public static func write(_ value: LocationSimulationState, into buf: inout [UInt8]) {
        FfiConverterTypeGeographicCoordinate.write(value.currentLocation, into: &buf)
        FfiConverterSequenceTypeGeographicCoordinate.write(value.remainingLocations, into: &buf)
    }
}


public func FfiConverterTypeLocationSimulationState_lift(_ buf: RustBuffer) throws -> LocationSimulationState {
    return try FfiConverterTypeLocationSimulationState.lift(buf)
}

public func FfiConverterTypeLocationSimulationState_lower(_ value: LocationSimulationState) -> RustBuffer {
    return FfiConverterTypeLocationSimulationState.lower(value)
}


public struct NavigationControllerConfig {
    public var stepAdvance: StepAdvanceMode

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(stepAdvance: StepAdvanceMode) {
        self.stepAdvance = stepAdvance
    }
}


extension NavigationControllerConfig: Equatable, Hashable {
    public static func ==(lhs: NavigationControllerConfig, rhs: NavigationControllerConfig) -> Bool {
        if lhs.stepAdvance != rhs.stepAdvance {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(stepAdvance)
    }
}


public struct FfiConverterTypeNavigationControllerConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NavigationControllerConfig {
        return
            try NavigationControllerConfig(
                stepAdvance: FfiConverterTypeStepAdvanceMode.read(from: &buf)
        )
    }

    public static func write(_ value: NavigationControllerConfig, into buf: inout [UInt8]) {
        FfiConverterTypeStepAdvanceMode.write(value.stepAdvance, into: &buf)
    }
}


public func FfiConverterTypeNavigationControllerConfig_lift(_ buf: RustBuffer) throws -> NavigationControllerConfig {
    return try FfiConverterTypeNavigationControllerConfig.lift(buf)
}

public func FfiConverterTypeNavigationControllerConfig_lower(_ value: NavigationControllerConfig) -> RustBuffer {
    return FfiConverterTypeNavigationControllerConfig.lower(value)
}


public struct Route {
    public var geometry: [GeographicCoordinate]
    public var distance: Double
    public var waypoints: [GeographicCoordinate]
    public var steps: [RouteStep]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(geometry: [GeographicCoordinate], distance: Double, waypoints: [GeographicCoordinate], steps: [RouteStep]) {
        self.geometry = geometry
        self.distance = distance
        self.waypoints = waypoints
        self.steps = steps
    }
}


extension Route: Equatable, Hashable {
    public static func ==(lhs: Route, rhs: Route) -> Bool {
        if lhs.geometry != rhs.geometry {
            return false
        }
        if lhs.distance != rhs.distance {
            return false
        }
        if lhs.waypoints != rhs.waypoints {
            return false
        }
        if lhs.steps != rhs.steps {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(geometry)
        hasher.combine(distance)
        hasher.combine(waypoints)
        hasher.combine(steps)
    }
}


public struct FfiConverterTypeRoute: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Route {
        return
            try Route(
                geometry: FfiConverterSequenceTypeGeographicCoordinate.read(from: &buf), 
                distance: FfiConverterDouble.read(from: &buf), 
                waypoints: FfiConverterSequenceTypeGeographicCoordinate.read(from: &buf), 
                steps: FfiConverterSequenceTypeRouteStep.read(from: &buf)
        )
    }

    public static func write(_ value: Route, into buf: inout [UInt8]) {
        FfiConverterSequenceTypeGeographicCoordinate.write(value.geometry, into: &buf)
        FfiConverterDouble.write(value.distance, into: &buf)
        FfiConverterSequenceTypeGeographicCoordinate.write(value.waypoints, into: &buf)
        FfiConverterSequenceTypeRouteStep.write(value.steps, into: &buf)
    }
}


public func FfiConverterTypeRoute_lift(_ buf: RustBuffer) throws -> Route {
    return try FfiConverterTypeRoute.lift(buf)
}

public func FfiConverterTypeRoute_lower(_ value: Route) -> RustBuffer {
    return FfiConverterTypeRoute.lower(value)
}


public struct RouteStep {
    public var geometry: [GeographicCoordinate]
    public var distance: Double
    public var roadName: String?
    public var instruction: String
    public var visualInstructions: [VisualInstruction]
    public var spokenInstructions: [SpokenInstruction]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(geometry: [GeographicCoordinate], distance: Double, roadName: String?, instruction: String, visualInstructions: [VisualInstruction], spokenInstructions: [SpokenInstruction]) {
        self.geometry = geometry
        self.distance = distance
        self.roadName = roadName
        self.instruction = instruction
        self.visualInstructions = visualInstructions
        self.spokenInstructions = spokenInstructions
    }
}


extension RouteStep: Equatable, Hashable {
    public static func ==(lhs: RouteStep, rhs: RouteStep) -> Bool {
        if lhs.geometry != rhs.geometry {
            return false
        }
        if lhs.distance != rhs.distance {
            return false
        }
        if lhs.roadName != rhs.roadName {
            return false
        }
        if lhs.instruction != rhs.instruction {
            return false
        }
        if lhs.visualInstructions != rhs.visualInstructions {
            return false
        }
        if lhs.spokenInstructions != rhs.spokenInstructions {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(geometry)
        hasher.combine(distance)
        hasher.combine(roadName)
        hasher.combine(instruction)
        hasher.combine(visualInstructions)
        hasher.combine(spokenInstructions)
    }
}


public struct FfiConverterTypeRouteStep: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RouteStep {
        return
            try RouteStep(
                geometry: FfiConverterSequenceTypeGeographicCoordinate.read(from: &buf), 
                distance: FfiConverterDouble.read(from: &buf), 
                roadName: FfiConverterOptionString.read(from: &buf), 
                instruction: FfiConverterString.read(from: &buf), 
                visualInstructions: FfiConverterSequenceTypeVisualInstruction.read(from: &buf), 
                spokenInstructions: FfiConverterSequenceTypeSpokenInstruction.read(from: &buf)
        )
    }

    public static func write(_ value: RouteStep, into buf: inout [UInt8]) {
        FfiConverterSequenceTypeGeographicCoordinate.write(value.geometry, into: &buf)
        FfiConverterDouble.write(value.distance, into: &buf)
        FfiConverterOptionString.write(value.roadName, into: &buf)
        FfiConverterString.write(value.instruction, into: &buf)
        FfiConverterSequenceTypeVisualInstruction.write(value.visualInstructions, into: &buf)
        FfiConverterSequenceTypeSpokenInstruction.write(value.spokenInstructions, into: &buf)
    }
}


public func FfiConverterTypeRouteStep_lift(_ buf: RustBuffer) throws -> RouteStep {
    return try FfiConverterTypeRouteStep.lift(buf)
}

public func FfiConverterTypeRouteStep_lower(_ value: RouteStep) -> RustBuffer {
    return FfiConverterTypeRouteStep.lower(value)
}


public struct SpokenInstruction {
    public var text: String
    public var ssml: String?
    public var triggerDistanceBeforeManeuver: Double

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(text: String, ssml: String?, triggerDistanceBeforeManeuver: Double) {
        self.text = text
        self.ssml = ssml
        self.triggerDistanceBeforeManeuver = triggerDistanceBeforeManeuver
    }
}


extension SpokenInstruction: Equatable, Hashable {
    public static func ==(lhs: SpokenInstruction, rhs: SpokenInstruction) -> Bool {
        if lhs.text != rhs.text {
            return false
        }
        if lhs.ssml != rhs.ssml {
            return false
        }
        if lhs.triggerDistanceBeforeManeuver != rhs.triggerDistanceBeforeManeuver {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(text)
        hasher.combine(ssml)
        hasher.combine(triggerDistanceBeforeManeuver)
    }
}


public struct FfiConverterTypeSpokenInstruction: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SpokenInstruction {
        return
            try SpokenInstruction(
                text: FfiConverterString.read(from: &buf), 
                ssml: FfiConverterOptionString.read(from: &buf), 
                triggerDistanceBeforeManeuver: FfiConverterDouble.read(from: &buf)
        )
    }

    public static func write(_ value: SpokenInstruction, into buf: inout [UInt8]) {
        FfiConverterString.write(value.text, into: &buf)
        FfiConverterOptionString.write(value.ssml, into: &buf)
        FfiConverterDouble.write(value.triggerDistanceBeforeManeuver, into: &buf)
    }
}


public func FfiConverterTypeSpokenInstruction_lift(_ buf: RustBuffer) throws -> SpokenInstruction {
    return try FfiConverterTypeSpokenInstruction.lift(buf)
}

public func FfiConverterTypeSpokenInstruction_lower(_ value: SpokenInstruction) -> RustBuffer {
    return FfiConverterTypeSpokenInstruction.lower(value)
}


public struct UserLocation {
    public var coordinates: GeographicCoordinate
    public var horizontalAccuracy: Double
    public var courseOverGround: CourseOverGround?
    public var timestamp: Date

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(coordinates: GeographicCoordinate, horizontalAccuracy: Double, courseOverGround: CourseOverGround?, timestamp: Date) {
        self.coordinates = coordinates
        self.horizontalAccuracy = horizontalAccuracy
        self.courseOverGround = courseOverGround
        self.timestamp = timestamp
    }
}


extension UserLocation: Equatable, Hashable {
    public static func ==(lhs: UserLocation, rhs: UserLocation) -> Bool {
        if lhs.coordinates != rhs.coordinates {
            return false
        }
        if lhs.horizontalAccuracy != rhs.horizontalAccuracy {
            return false
        }
        if lhs.courseOverGround != rhs.courseOverGround {
            return false
        }
        if lhs.timestamp != rhs.timestamp {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(coordinates)
        hasher.combine(horizontalAccuracy)
        hasher.combine(courseOverGround)
        hasher.combine(timestamp)
    }
}


public struct FfiConverterTypeUserLocation: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UserLocation {
        return
            try UserLocation(
                coordinates: FfiConverterTypeGeographicCoordinate.read(from: &buf), 
                horizontalAccuracy: FfiConverterDouble.read(from: &buf), 
                courseOverGround: FfiConverterOptionTypeCourseOverGround.read(from: &buf), 
                timestamp: FfiConverterTimestamp.read(from: &buf)
        )
    }

    public static func write(_ value: UserLocation, into buf: inout [UInt8]) {
        FfiConverterTypeGeographicCoordinate.write(value.coordinates, into: &buf)
        FfiConverterDouble.write(value.horizontalAccuracy, into: &buf)
        FfiConverterOptionTypeCourseOverGround.write(value.courseOverGround, into: &buf)
        FfiConverterTimestamp.write(value.timestamp, into: &buf)
    }
}


public func FfiConverterTypeUserLocation_lift(_ buf: RustBuffer) throws -> UserLocation {
    return try FfiConverterTypeUserLocation.lift(buf)
}

public func FfiConverterTypeUserLocation_lower(_ value: UserLocation) -> RustBuffer {
    return FfiConverterTypeUserLocation.lower(value)
}


public struct VisualInstruction {
    public var primaryContent: VisualInstructionContent
    public var secondaryContent: VisualInstructionContent?
    public var triggerDistanceBeforeManeuver: Double

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(primaryContent: VisualInstructionContent, secondaryContent: VisualInstructionContent?, triggerDistanceBeforeManeuver: Double) {
        self.primaryContent = primaryContent
        self.secondaryContent = secondaryContent
        self.triggerDistanceBeforeManeuver = triggerDistanceBeforeManeuver
    }
}


extension VisualInstruction: Equatable, Hashable {
    public static func ==(lhs: VisualInstruction, rhs: VisualInstruction) -> Bool {
        if lhs.primaryContent != rhs.primaryContent {
            return false
        }
        if lhs.secondaryContent != rhs.secondaryContent {
            return false
        }
        if lhs.triggerDistanceBeforeManeuver != rhs.triggerDistanceBeforeManeuver {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(primaryContent)
        hasher.combine(secondaryContent)
        hasher.combine(triggerDistanceBeforeManeuver)
    }
}


public struct FfiConverterTypeVisualInstruction: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VisualInstruction {
        return
            try VisualInstruction(
                primaryContent: FfiConverterTypeVisualInstructionContent.read(from: &buf), 
                secondaryContent: FfiConverterOptionTypeVisualInstructionContent.read(from: &buf), 
                triggerDistanceBeforeManeuver: FfiConverterDouble.read(from: &buf)
        )
    }

    public static func write(_ value: VisualInstruction, into buf: inout [UInt8]) {
        FfiConverterTypeVisualInstructionContent.write(value.primaryContent, into: &buf)
        FfiConverterOptionTypeVisualInstructionContent.write(value.secondaryContent, into: &buf)
        FfiConverterDouble.write(value.triggerDistanceBeforeManeuver, into: &buf)
    }
}


public func FfiConverterTypeVisualInstruction_lift(_ buf: RustBuffer) throws -> VisualInstruction {
    return try FfiConverterTypeVisualInstruction.lift(buf)
}

public func FfiConverterTypeVisualInstruction_lower(_ value: VisualInstruction) -> RustBuffer {
    return FfiConverterTypeVisualInstruction.lower(value)
}


public struct VisualInstructionContent {
    public var text: String
    public var maneuverType: ManeuverType?
    public var maneuverModifier: ManeuverModifier?
    public var roundaboutExitDegrees: UInt16?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(text: String, maneuverType: ManeuverType?, maneuverModifier: ManeuverModifier?, roundaboutExitDegrees: UInt16?) {
        self.text = text
        self.maneuverType = maneuverType
        self.maneuverModifier = maneuverModifier
        self.roundaboutExitDegrees = roundaboutExitDegrees
    }
}


extension VisualInstructionContent: Equatable, Hashable {
    public static func ==(lhs: VisualInstructionContent, rhs: VisualInstructionContent) -> Bool {
        if lhs.text != rhs.text {
            return false
        }
        if lhs.maneuverType != rhs.maneuverType {
            return false
        }
        if lhs.maneuverModifier != rhs.maneuverModifier {
            return false
        }
        if lhs.roundaboutExitDegrees != rhs.roundaboutExitDegrees {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(text)
        hasher.combine(maneuverType)
        hasher.combine(maneuverModifier)
        hasher.combine(roundaboutExitDegrees)
    }
}


public struct FfiConverterTypeVisualInstructionContent: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VisualInstructionContent {
        return
            try VisualInstructionContent(
                text: FfiConverterString.read(from: &buf), 
                maneuverType: FfiConverterOptionTypeManeuverType.read(from: &buf), 
                maneuverModifier: FfiConverterOptionTypeManeuverModifier.read(from: &buf), 
                roundaboutExitDegrees: FfiConverterOptionUInt16.read(from: &buf)
        )
    }

    public static func write(_ value: VisualInstructionContent, into buf: inout [UInt8]) {
        FfiConverterString.write(value.text, into: &buf)
        FfiConverterOptionTypeManeuverType.write(value.maneuverType, into: &buf)
        FfiConverterOptionTypeManeuverModifier.write(value.maneuverModifier, into: &buf)
        FfiConverterOptionUInt16.write(value.roundaboutExitDegrees, into: &buf)
    }
}


public func FfiConverterTypeVisualInstructionContent_lift(_ buf: RustBuffer) throws -> VisualInstructionContent {
    return try FfiConverterTypeVisualInstructionContent.lift(buf)
}

public func FfiConverterTypeVisualInstructionContent_lower(_ value: VisualInstructionContent) -> RustBuffer {
    return FfiConverterTypeVisualInstructionContent.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum ManeuverModifier {
    
    case uTurn
    case sharpRight
    case right
    case slightRight
    case straight
    case slightLeft
    case left
    case sharpLeft
}

public struct FfiConverterTypeManeuverModifier: FfiConverterRustBuffer {
    typealias SwiftType = ManeuverModifier

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ManeuverModifier {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .uTurn
        
        case 2: return .sharpRight
        
        case 3: return .right
        
        case 4: return .slightRight
        
        case 5: return .straight
        
        case 6: return .slightLeft
        
        case 7: return .left
        
        case 8: return .sharpLeft
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ManeuverModifier, into buf: inout [UInt8]) {
        switch value {
        
        
        case .uTurn:
            writeInt(&buf, Int32(1))
        
        
        case .sharpRight:
            writeInt(&buf, Int32(2))
        
        
        case .right:
            writeInt(&buf, Int32(3))
        
        
        case .slightRight:
            writeInt(&buf, Int32(4))
        
        
        case .straight:
            writeInt(&buf, Int32(5))
        
        
        case .slightLeft:
            writeInt(&buf, Int32(6))
        
        
        case .left:
            writeInt(&buf, Int32(7))
        
        
        case .sharpLeft:
            writeInt(&buf, Int32(8))
        
        }
    }
}


public func FfiConverterTypeManeuverModifier_lift(_ buf: RustBuffer) throws -> ManeuverModifier {
    return try FfiConverterTypeManeuverModifier.lift(buf)
}

public func FfiConverterTypeManeuverModifier_lower(_ value: ManeuverModifier) -> RustBuffer {
    return FfiConverterTypeManeuverModifier.lower(value)
}


extension ManeuverModifier: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum ManeuverType {
    
    case turn
    case newName
    case depart
    case arrive
    case merge
    case onRamp
    case offRamp
    case fork
    case endOfRoad
    case `continue`
    case roundabout
    case rotary
    case roundaboutTurn
    case notification
    case exitRoundabout
    case exitRotary
}

public struct FfiConverterTypeManeuverType: FfiConverterRustBuffer {
    typealias SwiftType = ManeuverType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ManeuverType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .turn
        
        case 2: return .newName
        
        case 3: return .depart
        
        case 4: return .arrive
        
        case 5: return .merge
        
        case 6: return .onRamp
        
        case 7: return .offRamp
        
        case 8: return .fork
        
        case 9: return .endOfRoad
        
        case 10: return .`continue`
        
        case 11: return .roundabout
        
        case 12: return .rotary
        
        case 13: return .roundaboutTurn
        
        case 14: return .notification
        
        case 15: return .exitRoundabout
        
        case 16: return .exitRotary
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ManeuverType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .turn:
            writeInt(&buf, Int32(1))
        
        
        case .newName:
            writeInt(&buf, Int32(2))
        
        
        case .depart:
            writeInt(&buf, Int32(3))
        
        
        case .arrive:
            writeInt(&buf, Int32(4))
        
        
        case .merge:
            writeInt(&buf, Int32(5))
        
        
        case .onRamp:
            writeInt(&buf, Int32(6))
        
        
        case .offRamp:
            writeInt(&buf, Int32(7))
        
        
        case .fork:
            writeInt(&buf, Int32(8))
        
        
        case .endOfRoad:
            writeInt(&buf, Int32(9))
        
        
        case .`continue`:
            writeInt(&buf, Int32(10))
        
        
        case .roundabout:
            writeInt(&buf, Int32(11))
        
        
        case .rotary:
            writeInt(&buf, Int32(12))
        
        
        case .roundaboutTurn:
            writeInt(&buf, Int32(13))
        
        
        case .notification:
            writeInt(&buf, Int32(14))
        
        
        case .exitRoundabout:
            writeInt(&buf, Int32(15))
        
        
        case .exitRotary:
            writeInt(&buf, Int32(16))
        
        }
    }
}


public func FfiConverterTypeManeuverType_lift(_ buf: RustBuffer) throws -> ManeuverType {
    return try FfiConverterTypeManeuverType.lift(buf)
}

public func FfiConverterTypeManeuverType_lower(_ value: ManeuverType) -> RustBuffer {
    return FfiConverterTypeManeuverType.lower(value)
}


extension ManeuverType: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum RouteRequest {
    
    case httpPost(url: String, headers: [String: String], body: Data)
}

public struct FfiConverterTypeRouteRequest: FfiConverterRustBuffer {
    typealias SwiftType = RouteRequest

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RouteRequest {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .httpPost(
            url: try FfiConverterString.read(from: &buf), 
            headers: try FfiConverterDictionaryStringString.read(from: &buf), 
            body: try FfiConverterData.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: RouteRequest, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .httpPost(url,headers,body):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(url, into: &buf)
            FfiConverterDictionaryStringString.write(headers, into: &buf)
            FfiConverterData.write(body, into: &buf)
            
        }
    }
}


public func FfiConverterTypeRouteRequest_lift(_ buf: RustBuffer) throws -> RouteRequest {
    return try FfiConverterTypeRouteRequest.lift(buf)
}

public func FfiConverterTypeRouteRequest_lower(_ value: RouteRequest) -> RustBuffer {
    return FfiConverterTypeRouteRequest.lower(value)
}


extension RouteRequest: Equatable, Hashable {}



public enum RoutingRequestGenerationError {

    
    
    case NotEnoughWaypoints
    case JsonError
    case UnknownError

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeRoutingRequestGenerationError.lift(error)
    }
}


public struct FfiConverterTypeRoutingRequestGenerationError: FfiConverterRustBuffer {
    typealias SwiftType = RoutingRequestGenerationError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RoutingRequestGenerationError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .NotEnoughWaypoints
        case 2: return .JsonError
        case 3: return .UnknownError

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: RoutingRequestGenerationError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .NotEnoughWaypoints:
            writeInt(&buf, Int32(1))
        
        
        case .JsonError:
            writeInt(&buf, Int32(2))
        
        
        case .UnknownError:
            writeInt(&buf, Int32(3))
        
        }
    }
}


extension RoutingRequestGenerationError: Equatable, Hashable {}

extension RoutingRequestGenerationError: Error { }

public enum RoutingResponseParseError {

    
    
    case ParseError(error: String)
    case UnknownError

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeRoutingResponseParseError.lift(error)
    }
}


public struct FfiConverterTypeRoutingResponseParseError: FfiConverterRustBuffer {
    typealias SwiftType = RoutingResponseParseError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RoutingResponseParseError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .ParseError(
            error: try FfiConverterString.read(from: &buf)
            )
        case 2: return .UnknownError

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: RoutingResponseParseError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .ParseError(error):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(error, into: &buf)
            
        
        case .UnknownError:
            writeInt(&buf, Int32(2))
        
        }
    }
}


extension RoutingResponseParseError: Equatable, Hashable {}

extension RoutingResponseParseError: Error { }

public enum SimulationError {

    
    
    case PolylineError(error: String)
    case NotEnoughPoints

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeSimulationError.lift(error)
    }
}


public struct FfiConverterTypeSimulationError: FfiConverterRustBuffer {
    typealias SwiftType = SimulationError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SimulationError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .PolylineError(
            error: try FfiConverterString.read(from: &buf)
            )
        case 2: return .NotEnoughPoints

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SimulationError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .PolylineError(error):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(error, into: &buf)
            
        
        case .NotEnoughPoints:
            writeInt(&buf, Int32(2))
        
        }
    }
}


extension SimulationError: Equatable, Hashable {}

extension SimulationError: Error { }

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum SimulationSpeed {
    
    case jumpToNextLocation
}

public struct FfiConverterTypeSimulationSpeed: FfiConverterRustBuffer {
    typealias SwiftType = SimulationSpeed

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SimulationSpeed {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .jumpToNextLocation
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SimulationSpeed, into buf: inout [UInt8]) {
        switch value {
        
        
        case .jumpToNextLocation:
            writeInt(&buf, Int32(1))
        
        }
    }
}


public func FfiConverterTypeSimulationSpeed_lift(_ buf: RustBuffer) throws -> SimulationSpeed {
    return try FfiConverterTypeSimulationSpeed.lift(buf)
}

public func FfiConverterTypeSimulationSpeed_lower(_ value: SimulationSpeed) -> RustBuffer {
    return FfiConverterTypeSimulationSpeed.lower(value)
}


extension SimulationSpeed: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum StepAdvanceMode {
    
    case manual
    case distanceToEndOfStep(distance: UInt16, minimumHorizontalAccuracy: UInt16)
    case relativeLineStringDistance(minimumHorizontalAccuracy: UInt16, automaticAdvanceDistance: UInt16?)
}

public struct FfiConverterTypeStepAdvanceMode: FfiConverterRustBuffer {
    typealias SwiftType = StepAdvanceMode

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> StepAdvanceMode {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .manual
        
        case 2: return .distanceToEndOfStep(
            distance: try FfiConverterUInt16.read(from: &buf), 
            minimumHorizontalAccuracy: try FfiConverterUInt16.read(from: &buf)
        )
        
        case 3: return .relativeLineStringDistance(
            minimumHorizontalAccuracy: try FfiConverterUInt16.read(from: &buf), 
            automaticAdvanceDistance: try FfiConverterOptionUInt16.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: StepAdvanceMode, into buf: inout [UInt8]) {
        switch value {
        
        
        case .manual:
            writeInt(&buf, Int32(1))
        
        
        case let .distanceToEndOfStep(distance,minimumHorizontalAccuracy):
            writeInt(&buf, Int32(2))
            FfiConverterUInt16.write(distance, into: &buf)
            FfiConverterUInt16.write(minimumHorizontalAccuracy, into: &buf)
            
        
        case let .relativeLineStringDistance(minimumHorizontalAccuracy,automaticAdvanceDistance):
            writeInt(&buf, Int32(3))
            FfiConverterUInt16.write(minimumHorizontalAccuracy, into: &buf)
            FfiConverterOptionUInt16.write(automaticAdvanceDistance, into: &buf)
            
        }
    }
}


public func FfiConverterTypeStepAdvanceMode_lift(_ buf: RustBuffer) throws -> StepAdvanceMode {
    return try FfiConverterTypeStepAdvanceMode.lift(buf)
}

public func FfiConverterTypeStepAdvanceMode_lower(_ value: StepAdvanceMode) -> RustBuffer {
    return FfiConverterTypeStepAdvanceMode.lower(value)
}


extension StepAdvanceMode: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum TripState {
    
    case navigating(snappedUserLocation: UserLocation, remainingSteps: [RouteStep], distanceToNextManeuver: Double)
    case complete
}

public struct FfiConverterTypeTripState: FfiConverterRustBuffer {
    typealias SwiftType = TripState

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TripState {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .navigating(
            snappedUserLocation: try FfiConverterTypeUserLocation.read(from: &buf), 
            remainingSteps: try FfiConverterSequenceTypeRouteStep.read(from: &buf), 
            distanceToNextManeuver: try FfiConverterDouble.read(from: &buf)
        )
        
        case 2: return .complete
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TripState, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .navigating(snappedUserLocation,remainingSteps,distanceToNextManeuver):
            writeInt(&buf, Int32(1))
            FfiConverterTypeUserLocation.write(snappedUserLocation, into: &buf)
            FfiConverterSequenceTypeRouteStep.write(remainingSteps, into: &buf)
            FfiConverterDouble.write(distanceToNextManeuver, into: &buf)
            
        
        case .complete:
            writeInt(&buf, Int32(2))
        
        }
    }
}


public func FfiConverterTypeTripState_lift(_ buf: RustBuffer) throws -> TripState {
    return try FfiConverterTypeTripState.lift(buf)
}

public func FfiConverterTypeTripState_lower(_ value: TripState) -> RustBuffer {
    return FfiConverterTypeTripState.lower(value)
}


extension TripState: Equatable, Hashable {}



fileprivate struct FfiConverterOptionUInt16: FfiConverterRustBuffer {
    typealias SwiftType = UInt16?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt16.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt16.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeCourseOverGround: FfiConverterRustBuffer {
    typealias SwiftType = CourseOverGround?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeCourseOverGround.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeCourseOverGround.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeVisualInstructionContent: FfiConverterRustBuffer {
    typealias SwiftType = VisualInstructionContent?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeVisualInstructionContent.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeVisualInstructionContent.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeManeuverModifier: FfiConverterRustBuffer {
    typealias SwiftType = ManeuverModifier?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeManeuverModifier.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeManeuverModifier.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeManeuverType: FfiConverterRustBuffer {
    typealias SwiftType = ManeuverType?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeManeuverType.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeManeuverType.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterSequenceTypeGeographicCoordinate: FfiConverterRustBuffer {
    typealias SwiftType = [GeographicCoordinate]

    public static func write(_ value: [GeographicCoordinate], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeGeographicCoordinate.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [GeographicCoordinate] {
        let len: Int32 = try readInt(&buf)
        var seq = [GeographicCoordinate]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeGeographicCoordinate.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeRoute: FfiConverterRustBuffer {
    typealias SwiftType = [Route]

    public static func write(_ value: [Route], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeRoute.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Route] {
        let len: Int32 = try readInt(&buf)
        var seq = [Route]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeRoute.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeRouteStep: FfiConverterRustBuffer {
    typealias SwiftType = [RouteStep]

    public static func write(_ value: [RouteStep], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeRouteStep.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [RouteStep] {
        let len: Int32 = try readInt(&buf)
        var seq = [RouteStep]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeRouteStep.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeSpokenInstruction: FfiConverterRustBuffer {
    typealias SwiftType = [SpokenInstruction]

    public static func write(_ value: [SpokenInstruction], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeSpokenInstruction.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [SpokenInstruction] {
        let len: Int32 = try readInt(&buf)
        var seq = [SpokenInstruction]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeSpokenInstruction.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeVisualInstruction: FfiConverterRustBuffer {
    typealias SwiftType = [VisualInstruction]

    public static func write(_ value: [VisualInstruction], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeVisualInstruction.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [VisualInstruction] {
        let len: Int32 = try readInt(&buf)
        var seq = [VisualInstruction]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeVisualInstruction.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterDictionaryStringString: FfiConverterRustBuffer {
    public static func write(_ value: [String: String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterString.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: String] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: String]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterString.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

public func advanceLocationSimulation(state: LocationSimulationState, speed: SimulationSpeed)  -> LocationSimulationState {
    return try!  FfiConverterTypeLocationSimulationState.lift(
        try! rustCall() {
    uniffi_ferrostar_fn_func_advance_location_simulation(
        FfiConverterTypeLocationSimulationState.lower(state),
        FfiConverterTypeSimulationSpeed.lower(speed),$0)
}
    )
}

public func createOsrmResponseParser(polylinePrecision: UInt32)  -> RouteResponseParser {
    return try!  FfiConverterTypeRouteResponseParser.lift(
        try! rustCall() {
    uniffi_ferrostar_fn_func_create_osrm_response_parser(
        FfiConverterUInt32.lower(polylinePrecision),$0)
}
    )
}

public func createValhallaRequestGenerator(endpointUrl: String, profile: String)  -> RouteRequestGenerator {
    return try!  FfiConverterTypeRouteRequestGenerator.lift(
        try! rustCall() {
    uniffi_ferrostar_fn_func_create_valhalla_request_generator(
        FfiConverterString.lower(endpointUrl),
        FfiConverterString.lower(profile),$0)
}
    )
}

public func locationSimulationFromCoordinates(coordinates: [GeographicCoordinate]) throws  -> LocationSimulationState {
    return try  FfiConverterTypeLocationSimulationState.lift(
        try rustCallWithError(FfiConverterTypeSimulationError.lift) {
    uniffi_ferrostar_fn_func_location_simulation_from_coordinates(
        FfiConverterSequenceTypeGeographicCoordinate.lower(coordinates),$0)
}
    )
}

public func locationSimulationFromPolyline(polyline: String, precision: UInt32) throws  -> LocationSimulationState {
    return try  FfiConverterTypeLocationSimulationState.lift(
        try rustCallWithError(FfiConverterTypeSimulationError.lift) {
    uniffi_ferrostar_fn_func_location_simulation_from_polyline(
        FfiConverterString.lower(polyline),
        FfiConverterUInt32.lower(precision),$0)
}
    )
}

public func locationSimulationFromRoute(route: Route) throws  -> LocationSimulationState {
    return try  FfiConverterTypeLocationSimulationState.lift(
        try rustCallWithError(FfiConverterTypeSimulationError.lift) {
    uniffi_ferrostar_fn_func_location_simulation_from_route(
        FfiConverterTypeRoute.lower(route),$0)
}
    )
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 25
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_ferrostar_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_ferrostar_checksum_func_advance_location_simulation() != 31818) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_func_create_osrm_response_parser() != 37676) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_func_create_valhalla_request_generator() != 42515) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_func_location_simulation_from_coordinates() != 32668) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_func_location_simulation_from_polyline() != 33402) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_func_location_simulation_from_route() != 52353) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_method_navigationcontroller_advance_to_next_step() != 5714) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_method_navigationcontroller_get_initial_state() != 22778) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_method_navigationcontroller_update_user_location() != 19022) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_method_routeadapter_generate_request() != 35986) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_method_routeadapter_parse_response() != 29808) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_method_routerequestgenerator_generate_request() != 34771) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_method_routeresponseparser_parse_response() != 30875) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_constructor_navigationcontroller_new() != 26294) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_constructor_routeadapter_new() != 22742) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_constructor_routeadapter_new_valhalla_http() != 34303) {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiCallbackInitRouteRequestGenerator()
    uniffiCallbackInitRouteResponseParser()
    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}